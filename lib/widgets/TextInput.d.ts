import { FocusType } from '../core/FocusType';
import type { Event } from '../events/Event';
import type { Theme } from '../theme/Theme';
import { FlexWidget } from './FlexWidget';
import type { Root } from '../core/Root';
export declare type TextValidator<V> = (text: string) => [boolean, V];
declare const TextInput_base: {
    new (...args: any[]): {
        _text: string;
        _font: string;
        _minLabelWidth: number;
        _minLabelAscent: number;
        _minLabelDescent: number;
        "__#6180@#labelWidth": number;
        "__#6180@#labelAscent": number;
        "__#6180@#labelDescent": number;
        "__#6180@#labelDirty": boolean;
        updateTextDims(): void;
        findOffsetFromIndex(index: number): number;
        findIndexOffsetFromOffset(offset: number): [number, number];
        setLabelDirty(): void;
        readonly labelWidth: number;
        readonly labelAscent: number;
        readonly labelDescent: number;
        readonly labelHeight: number;
        setText(text: string): void;
        setFont(font: string): void;
        setMinLabelWidth(minLabelWidth: number): void;
        setMinLabelAscent(minLabelAscent: number): void;
        setMinLabelDescent(minLabelDescent: number): void;
        "__#4152@#enabled": boolean;
        dirty: boolean;
        layoutDirty: boolean;
        readonly needsClear: boolean;
        readonly propagatesEvents: boolean;
        "__#4152@#themeOverride": Theme | null;
        "__#4152@#theme": Theme | null;
        "__#4152@#inheritedTheme": Theme | null;
        resolvedWidth: number;
        resolvedHeight: number;
        updateInheritedTheme(): void;
        updateTheme(): void;
        readonly theme: Theme;
        readonly enabled: boolean;
        enable(): void;
        disable(): void;
        setThemeOverride(theme: Theme | null): void;
        getThemeOverride(): Theme | null;
        inheritTheme(theme: Theme): void;
        getInheritedTheme(): Theme | null;
        onFocusDropped(_focusType: FocusType, _root: Root): void;
        handleEvent(event: Event, _width: number, _height: number, _root: Root): import("./Widget").Widget | null;
        dispatchEvent(event: Event, width: number, height: number, root: Root): import("./Widget").Widget | null;
        handlePreLayoutUpdate(_root: Root): void;
        preLayoutUpdate(root: Root): void;
        handlePopulateLayout(_layoutCtx: import("./LayoutContext").LayoutContext): void;
        handleResolveLayout(_layoutCtx: import("./LayoutContext").LayoutContext): void;
        populateLayout(layoutCtx: import("./LayoutContext").LayoutContext): void;
        resolveLayout(layoutCtx: import("./LayoutContext").LayoutContext): void;
        forceLayoutDirty(): void;
        handlePostLayoutUpdate(_root: Root): void;
        postLayoutUpdate(root: Root): void;
        clear(x: number, y: number, width: number, height: number, ctx: CanvasRenderingContext2D): void;
        handlePainting(_x: number, _y: number, _width: number, _height: number, _ctx: CanvasRenderingContext2D): void;
        paint(x: number, y: number, width: number, height: number, ctx: CanvasRenderingContext2D): void;
    };
} & {
    new (...args: any[]): {
        callback: import("../mixins/Variable").VariableCallback<string> | null;
        "__#6249@#value": string;
        value: string;
        setValue(value: string, doCallback?: boolean): void;
        "__#4152@#enabled": boolean;
        dirty: boolean;
        layoutDirty: boolean;
        readonly needsClear: boolean;
        readonly propagatesEvents: boolean;
        "__#4152@#themeOverride": Theme | null;
        "__#4152@#theme": Theme | null;
        "__#4152@#inheritedTheme": Theme | null;
        resolvedWidth: number;
        resolvedHeight: number;
        updateInheritedTheme(): void;
        updateTheme(): void;
        readonly theme: Theme;
        readonly enabled: boolean;
        enable(): void;
        disable(): void;
        setThemeOverride(theme: Theme | null): void;
        getThemeOverride(): Theme | null;
        inheritTheme(theme: Theme): void;
        getInheritedTheme(): Theme | null;
        onFocusDropped(_focusType: FocusType, _root: Root): void;
        handleEvent(event: Event, _width: number, _height: number, _root: Root): import("./Widget").Widget | null;
        dispatchEvent(event: Event, width: number, height: number, root: Root): import("./Widget").Widget | null;
        handlePreLayoutUpdate(_root: Root): void;
        preLayoutUpdate(root: Root): void;
        handlePopulateLayout(_layoutCtx: import("./LayoutContext").LayoutContext): void;
        handleResolveLayout(_layoutCtx: import("./LayoutContext").LayoutContext): void;
        populateLayout(layoutCtx: import("./LayoutContext").LayoutContext): void;
        resolveLayout(layoutCtx: import("./LayoutContext").LayoutContext): void;
        forceLayoutDirty(): void;
        handlePostLayoutUpdate(_root: Root): void;
        postLayoutUpdate(root: Root): void;
        clear(x: number, y: number, width: number, height: number, ctx: CanvasRenderingContext2D): void;
        handlePainting(_x: number, _y: number, _width: number, _height: number, _ctx: CanvasRenderingContext2D): void;
        paint(x: number, y: number, width: number, height: number, ctx: CanvasRenderingContext2D): void;
    };
} & typeof FlexWidget;
export declare class TextInput<V> extends TextInput_base {
    #private;
    constructor(validator: TextValidator<V>, initialValue?: string, themeOverride?: Theme | null);
    get blinkOn(): boolean | null;
    get editingEnabled(): boolean;
    set editingEnabled(editingEnabled: boolean);
    get hideText(): boolean;
    set hideText(hideText: boolean);
    get text(): string;
    get valid(): boolean;
    get validValue(): V;
    moveCursorTo(index: number): void;
    moveCursor(delta: number): void;
    insertText(str: string): void;
    deleteText(delta: number): void;
    onFocusDropped(focusType: FocusType, _root: Root): void;
    handleEvent(event: Event, _width: number, _height: number, root: Root): this;
    handlePreLayoutUpdate(root: Root): void;
    handlePainting(x: number, y: number, width: number, height: number, ctx: CanvasRenderingContext2D): void;
}
export {};
