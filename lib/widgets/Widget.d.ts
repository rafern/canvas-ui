import type { LayoutContext } from '../core/LayoutContext';
import type { FocusType } from '../core/FocusType';
import type { Event } from '../events/Event';
import type { Theme } from '../theme/Theme';
import type { Root } from '../core/Root';
export declare class Widget {
    private _enabled;
    protected _dirty: boolean;
    protected _layoutDirty: boolean;
    readonly needsClear: boolean;
    readonly propagatesEvents: boolean;
    private _themeOverride;
    private _theme;
    private _inheritedTheme;
    protected resolvedWidth: number;
    protected resolvedHeight: number;
    constructor(themeOverride: Theme | null, needsClear: boolean, propagatesEvents: boolean);
    protected updateInheritedTheme(): void;
    private updateTheme;
    get theme(): Theme;
    set enabled(enabled: boolean);
    get enabled(): boolean;
    protected setThemeOverride(theme: Theme | null): void;
    set themeOverride(theme: Theme | null);
    get themeOverride(): Theme | null;
    protected inheritTheme(theme: Theme | null): void;
    set inheritedTheme(theme: Theme | null);
    get inheritedTheme(): Theme | null;
    get dimensions(): [number, number];
    get dirty(): boolean;
    get layoutDirty(): boolean;
    onFocusDropped(_focusType: FocusType, _root: Root): void;
    protected handleEvent(event: Event, _width: number, _height: number, _root: Root): Widget | null;
    dispatchEvent(event: Event, width: number, height: number, root: Root): Widget | null;
    protected handlePreLayoutUpdate(_root: Root): void;
    preLayoutUpdate(root: Root): void;
    protected handlePopulateLayout(_layoutCtx: LayoutContext): void;
    protected handleResolveLayout(_layoutCtx: LayoutContext): void;
    populateLayout(layoutCtx: LayoutContext): void;
    resolveLayout(layoutCtx: LayoutContext): void;
    forceLayoutDirty(): void;
    protected handlePostLayoutUpdate(_root: Root): void;
    postLayoutUpdate(root: Root): void;
    protected clear(x: number, y: number, width: number, height: number, ctx: CanvasRenderingContext2D): void;
    protected handlePainting(_x: number, _y: number, _width: number, _height: number, _ctx: CanvasRenderingContext2D): void;
    paint(x: number, y: number, width: number, height: number, ctx: CanvasRenderingContext2D): void;
}
