import type { LayoutContext } from './LayoutContext';
import type { FocusType } from '../core/FocusType';
import type { Event } from '../events/Event';
import type { Theme } from '../theme/Theme';
import type { Root } from '../core/Root';
export declare class Widget {
    _enabled: boolean;
    dirty: boolean;
    layoutDirty: boolean;
    readonly needsClear: boolean;
    readonly propagatesEvents: boolean;
    themeOverride: Theme | null;
    _theme: Theme | null;
    inheritedTheme: Theme | null;
    resolvedWidth: number;
    resolvedHeight: number;
    constructor(themeOverride: Theme | null, needsClear: boolean, propagatesEvents: boolean);
    updateInheritedTheme(): void;
    updateTheme(): void;
    get theme(): Theme;
    get enabled(): boolean;
    enable(): void;
    disable(): void;
    setThemeOverride(theme: Theme | null): void;
    getThemeOverride(): Theme | null;
    inheritTheme(theme: Theme): void;
    getInheritedTheme(): Theme | null;
    onFocusDropped(_focusType: FocusType, _root: Root): void;
    handleEvent(event: Event, _width: number, _height: number, _root: Root): Widget | null;
    dispatchEvent(event: Event, width: number, height: number, root: Root): Widget | null;
    handlePreLayoutUpdate(_root: Root): void;
    preLayoutUpdate(root: Root): void;
    handlePopulateLayout(_layoutCtx: LayoutContext): void;
    handleResolveLayout(_layoutCtx: LayoutContext): void;
    populateLayout(layoutCtx: LayoutContext): void;
    resolveLayout(layoutCtx: LayoutContext): void;
    forceLayoutDirty(): void;
    handlePostLayoutUpdate(_root: Root): void;
    postLayoutUpdate(root: Root): void;
    clear(x: number, y: number, width: number, height: number, ctx: CanvasRenderingContext2D): void;
    handlePainting(_x: number, _y: number, _width: number, _height: number, _ctx: CanvasRenderingContext2D): void;
    paint(x: number, y: number, width: number, height: number, ctx: CanvasRenderingContext2D): void;
}
