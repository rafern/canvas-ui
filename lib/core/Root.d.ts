import type { PointerStyleHandler } from './PointerStyleHandler';
import type { TextInputHandler } from './TextInputHandler';
import type { Widget } from '../widgets/Widget';
import type { Event } from '../events/Event';
import type { Theme } from '../theme/Theme';
import { FocusType } from './FocusType';
import type { Driver } from './Driver';
import { Viewport } from './Viewport';
export declare class Root {
    readonly child: Widget;
    viewport: Viewport;
    drivers: Set<Driver>;
    _enabled: boolean;
    pointerStyle: string;
    _currentPointerStyle: string;
    pointerStyleHandler: PointerStyleHandler | null;
    readonly foci: Map<FocusType, Widget | null>;
    readonly lastFociCapturers: Map<FocusType, Widget | null>;
    textInputHandler: TextInputHandler | null;
    _mobileTextInUse: boolean;
    constructor(child: Widget, pointerStyleHandler?: PointerStyleHandler | null, theme?: Theme);
    get maxDimensions(): [number, number];
    set maxDimensions(maxDimensions: [number, number]);
    get canvasDimensions(): [number, number];
    get dimensions(): [number, number];
    get enabled(): boolean;
    set enabled(newEnabled: boolean);
    get canvas(): HTMLCanvasElement;
    resolveLayout(): void;
    paint(): boolean;
    dispatchEvent(event: Event): void;
    preLayoutUpdate(): void;
    postLayoutUpdate(): void;
    updatePointerStyle(newStyle?: string | null): void;
    requestFocus(focusType: FocusType, widget: Widget): void;
    dropFocus(focusType: FocusType, widget: Widget): void;
    clearFocus(focusType: FocusType): void;
    registerDriver(driver: Driver): void;
    unregisterDriver(driver: Driver): void;
    clearDrivers(): void;
    get hasMobileTextInput(): boolean;
    get usingMobileTextInput(): boolean;
    getTextInput(initialInput?: string): Promise<string | null>;
}
